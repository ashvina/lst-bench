# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

trigger: none

parameters:
- name: lsts
  type: object
  default:
    - table_format: "iceberg"
      version: "1.1.0"
      #TODO update iceberg version
      mode: "mor"
- name: workloads
  type: object
  default:
    - "wp1_longevity"
- name: exp_scale_factor
  type: number
  default: 1000
- name: exp_machine
  type: string
  default: "Standard_E8s_v5"
- name: exp_cluster_size
  type: number
  default: 6
- name: infra_environment
  type: string
  default: "formats-testing"

variables:
  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  MAVEN_OPTS: '-ntp -B -Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'
  EXP_SCALE_FACTOR: ${{ parameters.exp_scale_factor }}
  EXP_MACHINE: ${{ parameters.exp_machine }}
  EXP_CLUSTER_SIZE: ${{ parameters.exp_cluster_size }}
  JDK_INSTALLER_NAME: 'openjdk-17-jdk-headless'
  JDK_VERSION: '1.17'
  JDK_HOME: '/usr/lib/jvm/java-17-openjdk-amd64'
  SPARK_VERSION: '3.3.1'

stages:
# Build LST-Bench and create artifact to deploy to target VM
- stage: build
  jobs:
  - job: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Cache@2
      displayName: Cache Maven local repo
      inputs:
        key: 'maven | "$(Agent.OS)" | **/pom.xml'
        restoreKeys: |
          maven | "$(Agent.OS)"
          maven
        path: $(MAVEN_CACHE_FOLDER)
    - task: Maven@4
      inputs:
        mavenPomFile: 'pom.xml'
        options: $(MAVEN_OPTS)
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '$(JDK_VERSION)'
        publishJUnitResults: false
        goals: 'package -DskipTests -Pspark-jdbc'
    - task: CopyFiles@2
      displayName: 'Copy Artifacts to: $(TargetFolder)'
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)'
        TargetFolder: '$(System.DefaultWorkingDirectory)/pipeline-artifacts/'
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)/pipeline-artifacts/'
        artifact: lst-bench-0.1-SNAPSHOT

# Set up engine and deploy LST-Bench
- stage: deploy
  jobs:
  - deployment: EngineDeploy
    displayName: 'Deploying engine'
    workspace:
      clean: all
    environment:
      name: '${{ parameters.infra_environment }}'
      resourceType: VirtualMachine
      resourceName: 'lst-bench-head'
    strategy:
      runOnce:
        deploy:
          steps:
          - bash: |
              echo 'Deploy engine'
              sudo apt-get update
              sudo apt install -y $(JDK_INSTALLER_NAME) wget
              mkdir -p ~/spark-$(SPARK_VERSION)
              cp $(Pipeline.Workspace)/lst-bench-0.1-SNAPSHOT/core/run/spark-$(SPARK_VERSION)/azure-pipelines/sh/* ~/spark-$(SPARK_VERSION)/
              cd ~/spark-$(SPARK_VERSION)
              chmod +x ./*
              spark_head_node=$(ip addr show eth0 | sed -n 's/ *inet [^0-9]*\([0-9\.]\+\).*/\1/p')
              ./init.sh "${spark_head_node}" "$(data_storage_account)" "$(data_storage_account_shared_key)"
              ./dist-setup.sh
              ./dist-exec.sh spark-$(SPARK_VERSION) init.sh "${spark_head_node}" "$(data_storage_account)" "$(data_storage_account_shared_key)"
